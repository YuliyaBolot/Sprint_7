{"name": "Проверка получения ответа об успешном принятии заказа", "status": "passed", "statusDetails": {"message": "AssertionError: assert '{\"ok\":true}' in '{\"code\":404,\"message\":\"Заказа с таким id не существует\"}'\n +  where '{\"code\":404,\"message\":\"Заказа с таким id не существует\"}' = <Response [404]>.text", "trace": "self = <test_take_order.TestTakeOrder object at 0x104fd8aa0>\n\n    @allure.title('Проверка получения ответа об успешном принятии заказа')\n    def test_take_order(self):\n        url = 'https://qa-scooter.praktikum-services.ru'\n        payload = {\n            \"firstName\": faker.first_name(),\n            \"lastName\": faker.last_name(),\n            \"address\": faker.street_address(),\n            \"metroStation\": random.randint(0, 333),\n            \"phone\": faker.phone_number(),\n            \"rentTime\": random.randint(0, 7),\n            \"deliveryDate\": f\"2024-02-{random.randint(1, 29)}\",\n            \"comment\": \"Please leave at the gates\",\n            \"color\": [\n                \"BLACK\"\n            ]\n        }\n        payload_string = json.dumps(payload)\n        response = requests.post(f\"{url}/api/v1/orders\", data=payload_string)\n        id_order = response.json()[\"track\"]\n        user = User()\n        login_pass = user.register_new_courier_and_return_login_password()\n        login = login_pass[0]\n        password = login_pass[1]\n        payload = {\n            \"login\": login,\n            \"password\": password\n        }\n        response_post = requests.post(f\"{url}/api/v1/courier/login\", data=payload)\n        id_courier = response_post.json()['id']\n        response_put = requests.put(f\"{url}/api/v1/orders/accept/{id_order}?courierId={id_courier}\")\n>       assert '{\"ok\":true}' in response_put.text\nE       assert '{\"ok\":true}' in '{\"code\":404,\"message\":\"Заказа с таким id не существует\"}'\nE        +  where '{\"code\":404,\"message\":\"Заказа с таким id не существует\"}' = <Response [404]>.text\n\ntests/test_take_order.py:41: AssertionError"}, "start": 1706508486165, "stop": 1706508487491, "uuid": "40b1ce4c-6609-45dd-b9c9-72ce1cdea77f", "historyId": "e575ff5d2d58158d718089950c0cee8d", "testCaseId": "e575ff5d2d58158d718089950c0cee8d", "fullName": "tests.test_take_order.TestTakeOrder#test_take_order", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_take_order"}, {"name": "subSuite", "value": "TestTakeOrder"}, {"name": "host", "value": "MBP-Ilya.cn.ru_novotelecom.ru"}, {"name": "thread", "value": "11014-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_take_order"}]}